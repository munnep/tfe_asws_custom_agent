#cloud-config
write_files:
  - path: /etc/replicated.conf
    permissions: '0640'
    content: |
      {
          "DaemonAuthenticationType":          "password",
          "DaemonAuthenticationPassword":      "${tfe_password}",
          "TlsBootstrapType":                  "server-path",
          "TlsBootstrapHostname":              "${dns_hostname}.${dns_zonename}",
          "TlsBootstrapCert":                  "/var/tmp/server.crt",
          "TlsBootstrapKey":                   "/var/tmp/server.key",
          "BypassPreflightChecks":             true,
          "ImportSettingsFrom":                "/etc/tfe_settings.json",
          "LicenseFileLocation":               "/var/tmp/${filename_license}"
      }
  - path: /etc/tfe_settings.json
    permissions: '0640'
    content: |
      {
         "aws_instance_profile": {
              "value": "1"
          },
          "custom_agent_image_tag": {
              "value": "custom-agent:latest"
          },
          "enc_password": {
              "value": "${tfe_password}"
          },
          "hairpin_addressing": {
              "value": "0"
          },
          "hostname": {
              "value": "${dns_hostname}.${dns_zonename}"
          },
          "log_forwarding_config": {
          "value": "[OUTPUT]\n    Name                 syslog\n    Match                *\n    host                 ${tfe_client_ip}\n    port                 514\n    mode                 tcp\n    syslog_message_key   message\n    syslog_severity_key  PRIORITY\n    syslog_hostname_key  _HOSTNAME\n    syslog_appname_key   SYSLOG_IDENTIFIER\n    syslog_procid_key    _PID"
          },
          "log_forwarding_enabled": {
          "value": "1"
          },
          "pg_dbname": {
              "value": "${pg_dbname}"
          },
          "pg_netloc": {
              "value": "${pg_address}"
          },
          "pg_password": {
              "value": "${rds_password}"
          },
          "pg_user": {
              "value": "postgres"
          },
          "placement": {
              "value": "placement_s3"
          },
          "production_type": {
              "value": "external"
          },
          "run_pipeline_mode": {
              "value": "agent"
          },
          "s3_bucket": {
              "value": "${tfe_bucket}"
          },
          "s3_endpoint": {},
          "s3_region": {
              "value": "${region}"
          }
      }      
  - path: /var/tmp/install_software.sh 
    permissions: '0750'
    content: |
      #!/usr/bin/env bash
      # installation script for software
      
      # wait until archive is available. Wait until there is internet before continue
      until ping -c1 archive.ubuntu.com &>/dev/null; do
        echo "waiting for networking to initialise"
        sleep 3 
      done 
      
      # install monitoring tools
      apt-get update
      apt-get install -y ctop net-tools sysstat jq      

      # add public ssh key alvaro
      curl -sL https://raw.githubusercontent.com/kikitux/curl-bash/master/provision/add_github_user_public_keys.sh | GITHUB_USER=kikitux bash
      
      # add public ssh key patrick
      curl -sL https://raw.githubusercontent.com/kikitux/curl-bash/master/provision/add_github_user_public_keys.sh | GITHUB_USER=munnep bash

      curl -sL https://raw.githubusercontent.com/automodule/bash/main/install_netdata.sh | bash
      
      # Set swappiness
      if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
        echo never > /sys/kernel/mm/transparent_hugepage/enabled
      fi
      
      if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
        echo never > /sys/kernel/mm/transparent_hugepage/defrag
      fi
      
      # heavy swap vm.swappiness=80
      # no swap vm.swappiness=1

      echo vm.swappiness=1 >> /etc/sysctl.conf
      echo vm.min_free_kbytes=67584 >> /etc/sysctl.conf
      echo vm.drop_caches=1 >> /etc/sysctl.conf
      sysctl -p
      
      SWAP=/dev/$(lsblk|grep nvme | grep -v nvme0n1 |sort -k 4 | awk '{print $1}'| awk '(NR==1)')
      DOCKER=/dev/$(lsblk|grep nvme | grep -v nvme0n1 |sort -k 4 | awk '{print $1}'| awk '(NR==2)')
      
      echo $SWAP
      echo $DOCKER
      
      # swap
      # if SWAP exists
      # we format if no format
      if [ -b $SWAP ]; then
      	blkid $SWAP
      	if [ $? -ne 0 ]; then
      		mkswap $SWAP
      	fi
      fi
      
      # if SWAP not in fstab
      # we add it
      grep "swap" /etc/fstab
      if [ $? -ne 0 ]; then
        SWAP_UUID=`blkid $SWAP| awk '{print $2}'`
      	echo "$SWAP_UUID swap swap defaults 0 0" | tee -a /etc/fstab
      	swapon -a
      fi
      
      # docker
      # if DOCKER exists
      # we format if no format
      if [ -b $DOCKER ]; then
      	blkid $DOCKER
      	if [ $? -ne 0 ]; then
      		mkfs.xfs $DOCKER
      	fi
      fi
      
      # if DOCKER not in fstab
      # we add it
      grep "/var/lib/docker" /etc/fstab
      if [ $? -ne 0 ]; then
        DOCKER_UUID=`blkid $DOCKER| awk '{print $2}'`
      	echo "$DOCKER_UUID /var/lib/docker xfs defaults 0 0" | tee -a /etc/fstab
      	mkdir -p /var/lib/docker
      	mount -a
      fi
      
      # Netdata will be listening on port 19999
      curl -sL https://raw.githubusercontent.com/automodule/bash/main/install_netdata.sh | bash
  - path: /var/tmp/download_and_unpack_software.sh 
    permissions: '0750'
    content: |
      #!/usr/bin/env bash

      # wait until archive is available. Wait until there is internet before continue
      until ping -c1 archive.ubuntu.com &>/dev/null; do
        echo "waiting for networking to initialise"
        sleep 3 
      done 
      
      # Download all the software and files needed
      apt-get update      
      apt-get -y install awscli
      aws s3 cp s3://${tag_prefix}-software/${filename_license} /var/tmp/${filename_license}
      aws s3 cp s3://${tag_prefix}-software/certificate_pem /var/tmp/certificate_pem
      aws s3 cp s3://${tag_prefix}-software/issuer_pem /var/tmp/issuer_pem
      aws s3 cp s3://${tag_prefix}-software/private_key_pem /var/tmp/server.key

      # Create a full chain from the certificates
      cat /var/tmp/certificate_pem >> /var/tmp/server.crt
      cat /var/tmp/issuer_pem >> /var/tmp/server.crt
  - path: /var/tmp/install_tfe.sh   
    permissions: '0750'
    content: |
      #!/usr/bin/env bash    
      PUBLIC_IP=`curl http://169.254.169.254/latest/meta-data/public-ipv4`
      
      pushd /var/tmp
      curl -o install.sh https://install.terraform.io/ptfe/stable
      
      
      if [ "${tfe_release_sequence}" ] ; then
        bash ./install.sh release-sequence=${tfe_release_sequence} no-proxy private-address=${tfe-private-ip} public-address=$PUBLIC_IP
      else
        bash ./install.sh no-proxy private-address=${tfe-private-ip} public-address=$PUBLIC_IP
      fi

      replicatedctl params set ReleaseSequence --value '0'
  - path: /etc/tfe_initial_user.json
    permissions: '0755'
    content: |  
      {
          "username": "admin",
          "email": "${certificate_email}",
          "password": "${tfe_password}"
      }   
  - path: /etc/tfe_create_organization.json
    permissions: '0755'
    content: |  
      {
          "data": {
              "type": "organizations",
              "attributes": {
                  "name": "test",
                  "email": "${certificate_email}"
              }
          }
      }    
  - path: /etc/tfe_create_workspace.json
    permissions: '0755'
    content: |  
      {
          "data": {
              "attributes": {
                  "name": "test-custom-agent",
                  "resource-count": 0,
                  "updated-at": "2017-11-29T19:18:09.976Z"
              },
              "type": "workspaces"
          }
      }               
  - path: /var/tmp/tfe_setup.sh
    permissions: '0777'
    content: |
      #!/usr/bin/env bash
      
      # We have to wait for TFE be fully functioning before we can continue
      while true; do
          if curl -I "https://${dns_hostname}.${dns_zonename}/admin" 2>&1 | grep -w "200\|301" ; 
          then
              echo "TFE is up and running"
              echo "Will continue in 1 minutes with the final steps"
              sleep 60
              break
          else
              echo "TFE is not available yet. Please wait..."
              sleep 60
          fi
      done
      
      INITIAL_TOKEN=$(/usr/local/bin/replicated admin --tty=0 retrieve-iact | tr -d '\r')
      
      # get the admin token you can user to create the first user
      # Create the first user called admin and get the token
      curl --header "Content-Type: application/json" --request POST --data @/etc/tfe_initial_user.json  --url https://${dns_hostname}.${dns_zonename}/admin/initial-admin-user?token=$INITIAL_TOKEN | tee /etc/tfe_initial_user_output.json
      
      
      TOKEN=`jq -e -r .token /etc/tfe_initial_user_output.json`
      [[ $? -eq 0 && "$TOKEN" ]] || exit 1

      # create organization test
      curl \
        --header "Authorization: Bearer $TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --request POST \
        --data @/etc/tfe_create_organization.json \
        https://${dns_hostname}.${dns_zonename}/api/v2/organizations     

       # Create a cli-driven workspace named test-custom-worker
       curl \
       --header "Authorization: Bearer \$TOKEN" \
       --header "Content-Type: application/vnd.api+json" \
       --request POST \
       --data @/etc/tfe_create_workspace.json \
       https://${dns_hostname}.${dns_zonename}/api/v2/organizations/test/workspaces  
  - path: /var/tmp/custom-agent.sh
    permissions: '0777'
    content: |
      # Docker customer worker
      mkdir -p /var/tmp/docker
      pushd /var/tmp/docker
      aws s3 cp s3://${tag_prefix}-software/Dockerfile /var/tmp/docker/Dockerfile
      docker build -t custom-agent .
runcmd:
  - sudo bash /var/tmp/install_software.sh 
  - sudo bash /var/tmp/download_and_unpack_software.sh 
  - sudo bash /var/tmp/install_tfe.sh 
  - sudo bash /var/tmp/tfe_setup.sh 
  - sudo bash /var/tmp/custom-agent.sh
